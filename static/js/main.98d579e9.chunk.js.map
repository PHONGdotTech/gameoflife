{"version":3,"sources":["data_structures/doubly_linked_list.js","components/Box.js","components/Grid.js","components/Main.js","components/AboutPage.js","App.js","serviceWorker.js","index.js"],"names":["Node","value","this","prev","next","DoublyLinkedList","head","tail","length","val","newNode","popped","newTail","shiftedNode","newHead","index","unshift","push","after","accessAtIndex","before","removedNode","shift","pop","getNodeAtIndex","currentIndex","currentNode","foundNode","current","console","log","Box","props","className","boxClass","onClick","selectBox","Grid","width","cols","rowsArr","dll","key","style","Main","height","Math","floor","getWindowDimensions","initialDll","i","useState","rows","setRows","setCols","speed","generation","setGeneration","population","setPopulation","run","setRun","setDll","runRef","useRef","generationRef","dllRef","popRef","startButton","nextButton","setTimeout","newDll","aboveNode","belowNode","popCount","count","loadGun","a","reset","setNodeAtIndex","title","color","border","number","random","seed","node","window","innerWidth","innerHeight","AboutPage","href","target","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.98d579e9.chunk.js","sourcesContent":["//DOUBLY LINKED\r\nclass Node {\r\n    constructor(value) {\r\n      this.value = value;\r\n      this.prev = null;\r\n      this.next = null;\r\n    }\r\n}\r\n\r\nclass DoublyLinkedList {\r\n    constructor() {\r\n        this.head = null;\r\n        this.tail = null;\r\n        this.length = 0;\r\n    }\r\n\r\n    push(val) {\r\n        const newNode = new Node(val);\r\n        if (!this.head) {\r\n        this.head = newNode;\r\n        this.tail = newNode;\r\n        } else {\r\n        this.tail.next = newNode;\r\n        newNode.prev = this.tail;\r\n        this.tail = newNode;\r\n        }\r\n        this.length++;\r\n        return this;\r\n    }\r\n\r\n    pop() {\r\n        //in case of empty list\r\n        if (this.length === 0) {\r\n        return false;\r\n        }\r\n        //get popped node\r\n        const popped = this.tail;\r\n        //save newTail to a variable (could be null)\r\n        const newTail = this.tail.prev;\r\n        //if newTail is not null\r\n        if (newTail) {\r\n        //sever connection to popped node\r\n        newTail.next = null;\r\n        //sever connection from popped node\r\n        this.tail.prev = null;\r\n        //in case of 1 length list\r\n        } else {\r\n        //make sure to edit head in case newTail is null\r\n        this.head = null;\r\n        }\r\n        //assign new tail (could be null)\r\n        this.tail = newTail;\r\n        // subtract length\r\n        this.length--;\r\n\r\n        return popped;\r\n    }\r\n\r\n    shift() {\r\n        //in case list is empty\r\n        if (!this.head) {\r\n        return false;\r\n        }\r\n        //save shifted node to variable\r\n        const shiftedNode = this.head;\r\n        //make the new head the next (might be null)\r\n        const newHead = this.head.next; //might be null\r\n        //if list is more than 1\r\n        if (this.head !== this.tail) {\r\n        newHead.prev = null;\r\n        shiftedNode.next = null;\r\n        } else {\r\n        this.tail = null;\r\n        }\r\n        this.head = newHead;\r\n        this.length--;\r\n        return shiftedNode;\r\n    }\r\n\r\n    unshift(val) {\r\n        const newNode = new Node(val);\r\n        if (!this.head) {\r\n        this.head = newNode;\r\n        this.tail = newNode;\r\n        } else {\r\n        this.head.prev = newNode;\r\n        newNode.next = this.head;\r\n        this.head = newNode;\r\n        }\r\n        this.length++;\r\n        return this;\r\n    }\r\n\r\n    insertAtIndex(index, val) {\r\n        //if index doesn't exist\r\n        if (index > this.length) {\r\n        return false;\r\n        }\r\n        if (index === 0) {\r\n        this.unshift(val);\r\n        } else if (index === this.length) {\r\n        this.push(val);\r\n        } else {\r\n        const newNode = new Node(val);\r\n        const after = this.accessAtIndex(index);\r\n        const before = after.prev;\r\n        after.prev = newNode;\r\n        before.next = newNode;\r\n        newNode.next = after;\r\n        newNode.prev = before;\r\n        this.length++;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    removeAtIndex(index) {\r\n        let removedNode;\r\n        if (index >= this.length) {\r\n        return false;\r\n        }\r\n        if (index === 0) {\r\n        removedNode = this.shift();\r\n        } else if (index === this.length - 1) {\r\n        removedNode = this.pop();\r\n        } else {\r\n        removedNode = this.getNodeAtIndex(index);\r\n        const after = removedNode.next;\r\n        const before = removedNode.prev;\r\n        removedNode.next = null;\r\n        removedNode.prev = null;\r\n        before.next = after;\r\n        after.prev = before;\r\n        this.length--;\r\n        }\r\n        return removedNode;\r\n    }\r\n\r\n    getNodeAtIndex(index) {\r\n        if (index >= this.length || index < 0) {\r\n        return false;\r\n        }\r\n        let currentIndex = 0;\r\n        let currentNode = this.head;\r\n        while (currentIndex !== index) {\r\n        currentNode = currentNode.next;\r\n        currentIndex++;\r\n        }\r\n        return currentNode;\r\n    }\r\n\r\n    setNodeAtIndex(index, val) {\r\n        const foundNode = this.getNodeAtIndex(index)\r\n        if(foundNode){\r\n            foundNode.value = val\r\n            return foundNode;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    printList() {\r\n        if(this.head){\r\n        let current = this.head;\r\n        while (current.next) {\r\n            console.log(current);\r\n            current = current.next;\r\n        }\r\n        console.log(current);\r\n        } else {\r\n        console.log(\"empty list\")\r\n        }\r\n    }\r\n}\r\n\r\nexport {Node, DoublyLinkedList}","import React from 'react'\r\n\r\nexport default function Box(props){\r\n    const selectBox = () => {\r\n        props.selectBox(props.index)\r\n    }\r\n        \r\n    return(\r\n        <div className={props.boxClass} index={props.index} onClick={selectBox}>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Box from './Box'\r\n\r\nconst Grid = (props) =>{\r\n    const width = props.cols*12 + props.cols\r\n\r\n    var rowsArr = []\r\n\r\n    let index = 0\r\n    let current = props.dll.head\r\n\r\n    // loop through the dll and create a box for each node, then append to rowsArr to be returned in the grid\r\n    while(current.next){\r\n        const boxClass = current.value ? \"box on\" : \"box off\"\r\n        rowsArr.push(<Box boxClass={boxClass} key={index} index={index} selectBox={props.selectBox}/>)\r\n        \r\n        index++ \r\n        current = current.next\r\n    }\r\n    // add last box\r\n    rowsArr.push(<Box boxClass={props.dll.tail.value?\"box on\":\"box off\"} key={index} index={index} selectBox={props.selectBox}/>)\r\n    \r\n\r\n    return(\r\n        <div className=\"grid\" style={{width: width}}>\r\n            {rowsArr}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Grid","import React, {useState, useRef} from 'react';\r\nimport {DoublyLinkedList} from '../data_structures/doubly_linked_list'\r\nimport Grid from \"./Grid\"\r\n\r\nconst Main = () =>{\r\n    const height = Math.floor((getWindowDimensions().height / 18))\r\n    const width = Math.floor((getWindowDimensions().width / 15))\r\n    \r\n    const initialDll = new DoublyLinkedList()\r\n    for(let i = 0; i < height*width; i++){\r\n        initialDll.push(false)\r\n    }\r\n    \r\n    const [rows, setRows] = useState(height)\r\n    const [cols, setCols] = useState(width)\r\n    const [speed, setSpeed] = useState(1)\r\n    const [generation, setGeneration] = useState(0)\r\n    const [population, setPopulation] = useState(0)\r\n    const [run, setRun] = useState(false)\r\n    const [dll, setDll] = useState(initialDll)\r\n\r\n    const runRef = useRef(run)\r\n    runRef.current = run\r\n    const generationRef = useRef(generation)\r\n    generationRef.current = generation\r\n    const dllRef = useRef(dll)\r\n    dllRef.current = dll\r\n    const popRef = useRef(population)\r\n    popRef.current = population\r\n\r\n    const selectBox = (index) => {\r\n        if (!run){\r\n            let newDll = new DoublyLinkedList()\r\n            let node = dll.getNodeAtIndex(index)\r\n            node.value = !node.value\r\n            for(let i = 0; i < dll.length; i++){\r\n                newDll.push(dll.getNodeAtIndex(i).value)\r\n            }\r\n            \r\n            setDll(newDll)\r\n        }\r\n    }\r\n    \r\n    const startButton = () => {\r\n        if (!runRef.current){\r\n            return\r\n        }\r\n        nextButton()\r\n        setTimeout(startButton, speed)\r\n    }\r\n\r\n    const nextButton = () => {\r\n        setGeneration(generationRef.current + 1)\r\n        let newDll = new DoublyLinkedList()\r\n        let currentNode = dllRef.current.head\r\n        let aboveNode = dllRef.current.getNodeAtIndex(-cols)\r\n        let belowNode = dllRef.current.getNodeAtIndex(cols)\r\n        let popCount = 0\r\n\r\n        for(let i = 0; i < dllRef.current.length; i++){\r\n            let count = 0;\r\n\r\n            // current+left+right\r\n            if(currentNode){\r\n                if(currentNode.prev){\r\n                    if(currentNode.prev.value){\r\n                        count++\r\n                    }\r\n                }\r\n                if(currentNode.next){\r\n                    if(currentNode.next.value){\r\n                        count++\r\n                    } \r\n                } \r\n            }\r\n\r\n            // above\r\n            if(aboveNode){\r\n                if(aboveNode.value){\r\n                    count++\r\n                } \r\n                if(aboveNode.prev){\r\n                    if(aboveNode.prev.value) {\r\n                        count++\r\n                    }\r\n                } \r\n                if(aboveNode.next){\r\n                    if(aboveNode.next.value){\r\n                        count++\r\n                    } \r\n                }\r\n            } else {\r\n                aboveNode = dllRef.current.getNodeAtIndex(i-cols)\r\n            }\r\n\r\n            // below\r\n            if(belowNode){\r\n                if(belowNode.value){\r\n                    count++\r\n                } \r\n                if(belowNode.prev){\r\n                    if(belowNode.prev.value){\r\n                        count++\r\n                    } \r\n                }\r\n                if(belowNode.next){\r\n                    if(belowNode.next.value){\r\n                        count++\r\n                    } \r\n                } \r\n            } else {\r\n                belowNode = dllRef.current.getNodeAtIndex(i+cols)\r\n            }\r\n\r\n            // push value to new dll depending on count\r\n            if (count < 2 || count > 3){\r\n                newDll.push(false)\r\n            } else if(count === 3){\r\n                popCount++\r\n                newDll.push(true)\r\n            } else if (count === 2){\r\n                newDll.push(currentNode.value)\r\n                if (currentNode.value) popCount++\r\n            }\r\n\r\n            // get new above node\r\n            if (aboveNode.next){\r\n                aboveNode = aboveNode.next\r\n            } else{\r\n                aboveNode = null\r\n            }\r\n\r\n            // get new below node\r\n            if (belowNode.next){\r\n                belowNode = belowNode.next\r\n            } else{\r\n                belowNode = null\r\n            }\r\n\r\n            // get new current node\r\n            if (currentNode.next){\r\n                currentNode = currentNode.next\r\n            } else{\r\n                currentNode = null\r\n            }\r\n        }\r\n        setPopulation(popCount)\r\n        setDll(newDll) \r\n    }\r\n\r\n    const seed = (number=30) => {\r\n        let newDll = new DoublyLinkedList()\r\n        let popCount = 0\r\n        let current = dll.head\r\n\r\n        while(current.next){\r\n            if (Math.floor(Math.random() * 1/number*100) === 0){\r\n                newDll.push(true)\r\n                popCount++\r\n            }\r\n            else {\r\n                newDll.push(false)\r\n            }\r\n            current = current.next\r\n        }\r\n        // add last box\r\n        newDll.push(Math.floor(Math.random() * 1/number*100)===0?true:false)\r\n        if (newDll.tail.value) popCount++\r\n\r\n        setPopulation(popCount)\r\n        setDll(newDll)\r\n    }\r\n\r\n    const loadGun = async () => {\r\n        await reset()\r\n        let newDll = dll\r\n        newDll.setNodeAtIndex(16, true)\r\n        newDll.setNodeAtIndex(17+cols, true)\r\n        newDll.setNodeAtIndex(15+(2*cols), true)\r\n        newDll.setNodeAtIndex(16+(2*cols), true)\r\n        newDll.setNodeAtIndex(17+(2*cols), true)\r\n        newDll.setNodeAtIndex(23+(4*cols), true)\r\n        newDll.setNodeAtIndex(25+(4*cols), true)\r\n        newDll.setNodeAtIndex(21+(5*cols), true)\r\n        newDll.setNodeAtIndex(25+(5*cols), true)\r\n        newDll.setNodeAtIndex(13+(6*cols), true)\r\n        newDll.setNodeAtIndex(21+(6*cols), true)\r\n        newDll.setNodeAtIndex(12+(7*cols), true)\r\n        newDll.setNodeAtIndex(13+(7*cols), true)\r\n        newDll.setNodeAtIndex(14+(7*cols), true)\r\n        newDll.setNodeAtIndex(15+(7*cols), true)\r\n        newDll.setNodeAtIndex(20+(7*cols), true)\r\n        newDll.setNodeAtIndex(25+(7*cols), true)\r\n        newDll.setNodeAtIndex(34+(7*cols), true)\r\n        newDll.setNodeAtIndex(35+(7*cols), true)\r\n        newDll.setNodeAtIndex(11+(8*cols), true)\r\n        newDll.setNodeAtIndex(12+(8*cols), true)\r\n        newDll.setNodeAtIndex(14+(8*cols), true)\r\n        newDll.setNodeAtIndex(16+(8*cols), true)\r\n        newDll.setNodeAtIndex(21+(8*cols), true)\r\n        newDll.setNodeAtIndex(34+(8*cols), true)\r\n        newDll.setNodeAtIndex(35+(8*cols), true)\r\n        newDll.setNodeAtIndex((9*cols), true)\r\n        newDll.setNodeAtIndex(1+(9*cols), true)\r\n        newDll.setNodeAtIndex(10+(9*cols), true)\r\n        newDll.setNodeAtIndex(11+(9*cols), true)\r\n        newDll.setNodeAtIndex(12+(9*cols), true)\r\n        newDll.setNodeAtIndex(14+(9*cols), true)\r\n        newDll.setNodeAtIndex(17+(9*cols), true)\r\n        newDll.setNodeAtIndex(21+(9*cols), true)\r\n        newDll.setNodeAtIndex(25+(9*cols), true)\r\n        newDll.setNodeAtIndex((10*cols), true)\r\n        newDll.setNodeAtIndex(1+(10*cols), true)\r\n        newDll.setNodeAtIndex(11+(10*cols), true)\r\n        newDll.setNodeAtIndex(12+(10*cols), true)\r\n        newDll.setNodeAtIndex(14+(10*cols), true)\r\n        newDll.setNodeAtIndex(16+(10*cols), true)\r\n        newDll.setNodeAtIndex(23+(10*cols), true)\r\n        newDll.setNodeAtIndex(25+(10*cols), true)\r\n        newDll.setNodeAtIndex(12+(11*cols), true)\r\n        newDll.setNodeAtIndex(13+(11*cols), true)\r\n        newDll.setNodeAtIndex(14+(11*cols), true)\r\n        newDll.setNodeAtIndex(15+(11*cols), true)\r\n        newDll.setNodeAtIndex(13+(12*cols), true)\r\n\r\n        setPopulation(39)\r\n        setDll(newDll)\r\n    }\r\n\r\n    const reset = () => {\r\n        const height = Math.floor((getWindowDimensions().height / 18))\r\n        const width = Math.floor((getWindowDimensions().width / 15))\r\n\r\n        let newDll = new DoublyLinkedList()\r\n        for(let i = 0; i < height*width; i++){\r\n            newDll.push(false)\r\n        }\r\n        setPopulation(0)\r\n        setRows(height)\r\n        setCols(width)\r\n        setDll(newDll)\r\n        setGeneration(0)\r\n    }\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <div className=\"main game\">\r\n                <h1>Conway's Game of Life</h1>\r\n                <div className=\"buttons_container\">\r\n                    <button \r\n                        onClick={async () => {\r\n                            await setRun(!run);\r\n                            startButton()\r\n                        }}\r\n                        title=\"Start the Game of Life\" \r\n                        style={\r\n                            run ?\r\n                                {color: \"red\", border: \"red 1px solid\"}:\r\n                            {color: \"green\", border: \"green 1px solid\"}\r\n                        }\r\n                    >\r\n                        {run ? \"Stop\" : \"Start\"}\r\n                    </button>\r\n                    <button title=\"Go to the next generation\" onClick={() => nextButton()}>Next Generation</button>\r\n                    <button title=\"Randomly select the grid's status\" onClick={() => seed()}>Randomize</button>\r\n                    <button title=\"Load a preset called the Gospel glider gun.\" onClick={()=>loadGun()}>Load Gun</button>\r\n                    <button title=\"Reset the grid and the generations\" onClick={() => reset()}>Reset</button>\r\n                </div>\r\n                <div className=\"middle\">\r\n                        <Grid dll={dll} rows={rows} cols={cols} selectBox={selectBox}/>\r\n                        <h2 title=\"The current generation.\">Generations: {generation}</h2>\r\n                        <div className=\"midSection\" title=\"How many cells are currently alive.\"><h4>Population:</h4><span className=\"midSection\">{popRef.current}</span></div>\r\n                        <div className=\"midSection\"><h4 title=\"The size of the grid, automatically calculated based on your window size.\">Grid size:</h4><span className=\"midSection\">{width} x {height} = {width*height}</span></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n      width,\r\n      height\r\n    };\r\n}","import React from 'react'\r\n\r\nconst AboutPage = () => {\r\n    return (\r\n        <div className=\"about\">\r\n            <div className=\"about_section\">\r\n                <div className=\"rules text others\">\r\n                    <div className=\"subtitle\"><h3>About The Game of Life</h3></div>\r\n                    <p>The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970. It is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input.</p>\r\n                    <span><a href=\"https://en.wikipedia.org/wiki/Conway's_Game_of_Life\" target=\"_blank\">Wikipedia</a></span>\r\n                </div>\r\n                <div className=\"rules others\">\r\n                    <div className=\"subtitle\"><h3>Instructions</h3></div>\r\n                    <li>Click <button style={{color: \"green\", border: \"green 1px solid\"}}>Start</button> to begin simulating. This button only appears if simulation <strong>is not</strong> running.</li>\r\n                    <li>Click <button style={{color: \"red\", border: \"red 1px solid\"}}>Stop</button> to stop simulating. This button only appears if the simulation <strong>is</strong> running.</li>\r\n                    <li>Click <button>Next Generation</button> to go to the next life-cycle generation.</li>\r\n                    <li>Click <button>Randomize</button> to randomly populate the grid with live cells. Each box has a 30% chance to be alive.</li>\r\n                    <li>Click <button>Reset</button> to reset the grid and the generation. The grid's size is based on your browser's current window size.</li>\r\n                    <li>Click on any box on the grid to toggle it's status.</li>\r\n                </div>\r\n                <div className=\"rules others\">\r\n                        <div className=\"subtitle\"><h3>Rules of the Game</h3></div>\r\n                        <ol className=\"list\">\r\n                            <li>Any live cell with two or three live neighbours survives.</li>\r\n                            <li>Any dead cell with three live neighbours becomes a live cell.</li>\r\n                            <li>All other live cells die in the next generation. Similarly, all other dead cells stay dead.</li>\r\n                        </ol>\r\n                        <h6>Note: In this particular project, the left and right edge of the grid wrap around. However, the top and bottom edges do not wrap around and any cell that goes above those bounds are considered dead.</h6>\r\n                </div>\r\n                <div className=\"rules others\">\r\n                    <div className=\"subtitle\"><h3>About Me</h3></div>\r\n                    <p><a href=\"https://github.com/PHONGdotTech\">Phong's GitHub profile</a></p>\r\n                    <p><a href=\"https://github.com/PHONGdotTech/gameoflife\">This project's GitHub repo</a></p>\r\n                    <p>This project was built using React, functional components, and doubly linked lists as the primary data structure.</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AboutPage","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Main from './components/Main'\r\nimport About from './components/AboutPage'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Main />\r\n      <About />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}